package tw.skyarrow.ehreader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tw.skyarrow.ehreader.db.Gallery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GALLERY.
*/
public class GalleryDao extends AbstractDao<Gallery, Long> {

    public static final String TABLENAME = "GALLERY";

    /**
     * Properties of entity Gallery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Subtitle = new Property(3, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Category = new Property(4, Integer.class, "category", false, "CATEGORY");
        public final static Property Count = new Property(5, Integer.class, "count", false, "COUNT");
        public final static Property Thumbnail = new Property(6, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Starred = new Property(7, Boolean.class, "starred", false, "STARRED");
        public final static Property Downloaded = new Property(8, Boolean.class, "downloaded", false, "DOWNLOADED");
        public final static Property Rating = new Property(9, Float.class, "rating", false, "RATING");
        public final static Property Created = new Property(10, java.util.Date.class, "created", false, "CREATED");
        public final static Property Lastread = new Property(11, java.util.Date.class, "lastread", false, "LASTREAD");
        public final static Property Tags = new Property(12, String.class, "tags", false, "TAGS");
        public final static Property Uploader = new Property(13, String.class, "uploader", false, "UPLOADER");
        public final static Property Progress = new Property(14, Integer.class, "progress", false, "PROGRESS");
    };

    private DaoSession daoSession;


    public GalleryDao(DaoConfig config) {
        super(config);
    }
    
    public GalleryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GALLERY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TOKEN' TEXT NOT NULL ," + // 1: token
                "'TITLE' TEXT," + // 2: title
                "'SUBTITLE' TEXT," + // 3: subtitle
                "'CATEGORY' INTEGER," + // 4: category
                "'COUNT' INTEGER," + // 5: count
                "'THUMBNAIL' TEXT," + // 6: thumbnail
                "'STARRED' INTEGER," + // 7: starred
                "'DOWNLOADED' INTEGER," + // 8: downloaded
                "'RATING' REAL," + // 9: rating
                "'CREATED' INTEGER," + // 10: created
                "'LASTREAD' INTEGER," + // 11: lastread
                "'TAGS' TEXT," + // 12: tags
                "'UPLOADER' TEXT," + // 13: uploader
                "'PROGRESS' INTEGER);"); // 14: progress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GALLERY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gallery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getToken());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(4, subtitle);
        }
 
        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(5, category);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(6, count);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(7, thumbnail);
        }
 
        Boolean starred = entity.getStarred();
        if (starred != null) {
            stmt.bindLong(8, starred ? 1l: 0l);
        }
 
        Boolean downloaded = entity.getDownloaded();
        if (downloaded != null) {
            stmt.bindLong(9, downloaded ? 1l: 0l);
        }
 
        Float rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(10, rating);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(11, created.getTime());
        }
 
        java.util.Date lastread = entity.getLastread();
        if (lastread != null) {
            stmt.bindLong(12, lastread.getTime());
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(13, tags);
        }
 
        String uploader = entity.getUploader();
        if (uploader != null) {
            stmt.bindString(14, uploader);
        }
 
        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(15, progress);
        }
    }

    @Override
    protected void attachEntity(Gallery entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gallery readEntity(Cursor cursor, int offset) {
        Gallery entity = new Gallery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subtitle
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thumbnail
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // starred
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // downloaded
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // rating
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // created
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // lastread
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tags
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // uploader
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // progress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gallery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubtitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setThumbnail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStarred(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setDownloaded(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setRating(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setCreated(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setLastread(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setTags(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUploader(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProgress(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gallery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gallery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
